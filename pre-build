#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
export DOCKER_BIN=${DOCKER_BIN:="docker"}
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/apt/internal-functions"

hook-apt-pre-build() {
  declare BUILDER_TYPE="$1" APP="$2" SOURCECODE_WORK_DIR="$3"
  local IMAGE="dokku/$APP" DIR=/app
  local CID COMMAND DOCKER_COMMIT_LABEL_ARGS
  # This trigger is only called with apps using buildpacks, so it's safe to assume this:
  local BUILDER_TYPE=herokuish

  if [[ -n "$SOURCECODE_WORK_DIR" ]]; then
    pushd "$SOURCECODE_WORK_DIR" >/dev/null
  fi

  if [[ ! -d "dpkg-packages" ]]; then
    return
  fi

  if [[ -n "$SOURCECODE_WORK_DIR" ]]; then
    popd >/dev/null
  fi

  local DOCKER_ARGS=$(: | plugn trigger docker-args-build "$APP" "$BUILDER_TYPE")
  declare -a ARG_ARRAY
  eval "ARG_ARRAY=($DOCKER_ARGS)"

  dokku_log_info1 "Creating extended app image with custom system packages"
  COMMAND="$(fn-apt-command "$APP" "$IMAGE" "$DIR")"
  CID=$(docker run -d "${ARG_ARRAY[@]}" "$IMAGE" /bin/bash -e -c "$COMMAND")

  "$DOCKER_BIN" container attach "$CID"
  if test "$("$DOCKER_BIN" container wait "$CID")" -ne 0; then
    dokku_log_warn "Failure installing system packages"
    return 1
  fi

  DOCKER_COMMIT_LABEL_ARGS=("--change" "LABEL org.label-schema.schema-version=1.0" "--change" "LABEL org.label-schema.vendor=dokku" "--change" "LABEL com.dokku.app-name=$APP" "--change" "LABEL $DOKKU_CONTAINER_LABEL=")
  "$DOCKER_BIN" container commit "${DOCKER_COMMIT_LABEL_ARGS[@]}" "$CID" "$IMAGE" >/dev/null
  "$DOCKER_BIN" container rm "$CID" &>/dev/null || true
}

hook-apt-pre-build "$@"
