#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
export DOCKER_BIN=${DOCKER_BIN:="docker"}
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/apt/internal-functions"

hook-apt-builder-create-dokku-image() {
  declare BUILDER_TYPE="$1" APP="$2" SOURCECODE_WORK_DIR="$3" DOKKU_IMAGE="$4"
  local IMAGE="dokku/$APP"
  local COMMAND CONTENT_SHA DOCKER_COMMIT_LABEL_ARGS DOCKER_RUN_LABEL_ARGS
  local TMP_WORK_DIR DOCKER_ARGS

  if [[ -d "$SOURCECODE_WORK_DIR/dpkg-packages" ]]; then
    dokku_log_info1 "Rebuilding extended app image due to dpkg-packages usage"
    return
  fi

  CONTENT_SHA="$(fn-apt-fetch-sha "$SOURCECODE_WORK_DIR" "$DOKKU_IMAGE")"
  if [[ -z "$CONTENT_SHA" ]]; then
    return
  fi

  TMP_WORK_DIR=$(mktemp -d "/tmp/dokku-${DOKKU_PID}-${FUNCNAME[0]}.XXXXXX")
  CID_FILE="$(mktemp -u "/tmp/dokku-${DOKKU_PID}-${FUNCNAME[0]}.XXXXXX")"
  # shellcheck disable=SC2064
  trap "rm -rf '$TMP_WORK_DIR' '$CID_FILE' >/dev/null" RETURN
  fn-apt-populate-work-dir "$SOURCECODE_WORK_DIR" "$TMP_WORK_DIR"

  if [[ "$("$DOCKER_BIN" image ls --quiet "dokku/$APP:$CONTENT_SHA" 2>/dev/null)" != "" ]]; then
    dokku_log_info1 "Compatible extended app image found, skipping system package installation"
    fn-clean-extended-app-images "$APP" "dokku/$APP:$CONTENT_SHA"
    return
  fi

  dokku_log_info1 "Creating extended app image with custom system packages"
  pushd "$TMP_WORK_DIR" >/dev/null
  # shellcheck disable=SC2086
  tar -c . | "$DOCKER_BIN" container run "${DOCKER_RUN_LABEL_ARGS[@]}" $DOKKU_GLOBAL_RUN_ARGS -i -a stdin --cidfile="$CID_FILE" "$DOKKU_IMAGE" /bin/bash -c "mkdir -p /tmp/apt && tar -xC /tmp/apt"
  popd >/dev/null

  CID="$(cat "$CID_FILE")"
  rm -f "$CID_FILE"
  if [[ -z "$CID" ]]; then
    dokku_log_warn "Failure creating extended app image"
    return 1
  fi

  if test "$("$DOCKER_BIN" container wait "$CID")" -ne 0; then
    dokku_log_warn "Failure extracting apt files"
    return 1
  fi

  DOCKER_COMMIT_LABEL_ARGS=("--change" "LABEL org.label-schema.schema-version=1.0" "--change" "LABEL org.label-schema.vendor=dokku" "--change" "LABEL com.dokku.app-name=$APP" "--change" "LABEL $DOKKU_CONTAINER_LABEL=")
  "$DOCKER_BIN" container commit "${DOCKER_COMMIT_LABEL_ARGS[@]}" "$CID" "$IMAGE:apt" >/dev/null
  "$DOCKER_BIN" container rm "$CID" &>/dev/null || true

  DOCKER_ARGS=$(: | plugn trigger docker-args-build "$APP" "$BUILDER_TYPE")
  declare -a ARG_ARRAY
  eval "ARG_ARRAY=($DOCKER_ARGS)"

  COMMAND="$(fn-apt-command "$APP" "$DOKKU_IMAGE" "/tmp/apt")"
  DOCKER_RUN_LABEL_ARGS="--label=com.dokku.app-name=$APP"
  # shellcheck disable=SC2086
  CID=$("$DOCKER_BIN" container run "${DOCKER_RUN_LABEL_ARGS[@]}" $DOKKU_GLOBAL_RUN_ARGS -d "${ARG_ARRAY[@]}" "$IMAGE:apt" /bin/bash -e -c "$COMMAND")

  "$DOCKER_BIN" container attach "$CID"
  if test "$("$DOCKER_BIN" container wait "$CID")" -ne 0; then
    dokku_log_warn "Failure installing system packages"
    return 1
  fi

  DOCKER_COMMIT_LABEL_ARGS=("--change" "LABEL org.label-schema.schema-version=1.0" "--change" "LABEL org.label-schema.vendor=dokku" "--change" "LABEL com.dokku.app-name=sha-$APP" "--change" "LABEL $DOKKU_CONTAINER_LABEL=")
  "$DOCKER_BIN" container commit "${DOCKER_COMMIT_LABEL_ARGS[@]}" "$CID" "dokku/$APP:$CONTENT_SHA" >/dev/null
  "$DOCKER_BIN" container rm "$CID" &>/dev/null || true
  "$DOCKER_BIN" image rm "$IMAGE:apt" &>/dev/null || true
  fn-clean-extended-app-images "$APP" "dokku/$APP:$CONTENT_SHA"
}

hook-apt-builder-create-dokku-image "$@"
